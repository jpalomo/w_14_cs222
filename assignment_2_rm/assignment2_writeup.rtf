{\rtf1\ansi\ansicpg1252\cocoartf1265
{\fonttbl\f0\fnil\fcharset0 Cambria;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\tqc\tx4320\tqr\tx8640\pardeftab720\ri720\qr

\f0\fs24 \cf0 John Palomo\
Liangjun Feng\
Group 15\
\pard\pardeftab720\ri720

\f1 \cf0 \

\f0 Our relationship manager took a straightforward approach to creating tables through its interface.  As mentioned in the requirements, there are two tables that comprise the system catalog, tables.tbl and columns.tbl.  In these tables we store all the requisite information needed for the database to run properly.  \
\
Our approach to database initialization takes one of two approaches each time an instance of the relationship manager is retrieved.  \
\
The first approach is when the database is initialized for the first time, meaning no tables have yet been created, including the catalog files.  This is determined in the constructor of the RelationshipManager class which does a simple check to see if the tables.tbl file exists by trying to open it.  If the opening of the file fails, the file is created and the tables.tbl entry is inserted.  After this,  the columns.tbl is created and the associated columns of the tables.tbl are inserted into the columns.tbl.  The process is repeated for the columns table (create an entry in tables.tbl and then the columns.tbl).  At this point the tables have been initialized with their default values.\
\
It should be noted, that during the creation of these system tables, we build two in memory maps of maps that aid in the look up of tables and their associated columns.  The first map is a tables map (map<string TABLENAME, map<int TABLE ID, RID> >) which maps a table name to another map which consists of the table id (a simple counter for the tables inserted) and the associated record id of the table entry.  This allows us to delete tables, easily and find their associated columns using the second map (map<int TABLE ID, map<int COLPOSITION, RID>>).  This map was crucial in our implementation as it allowed us to find all the column record ids that are associated with a unique table id.  So when we want to read the column information for a given table name, we look up the table ID in the first map by giving the table name.  Then once we have the table Id, we get the columns and their associated RIDs to read the column information for a given tables columns and populate the table/record descriptor.  \
\
Another in-memory data structure we hold are two Attribute vectors that describe the column and table tables.  We read from these tables often and since they are system tables they will not be changed by users or update on a frequent basis.  As an additional precaution to preventing users from modifying or deleting system tables, we created a method that is called for any updates/creation of tables to check whether a table is a system table or not.  This  is done by reading the TABLE_TYPE attribute of the table from the tables.tbl.  Any call to update, delete, insert into a system table through the relation manager API will result in an error notifying the calling method that there is not appropriate privileges to perform the operation.  In order to make changes to these tables, we will implement additional methods for system calls to modify/create/delete system tables.  These methods will be private and therefore not visible to calling clients.  }